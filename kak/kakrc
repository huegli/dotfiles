def fed -params 1 -shell-script-candidates %{ fd . -L -t f } %{ edit %arg{1} }
def fcd -params 1 -shell-script-candidates %{ fd . -t d } %{ change-directory %arg{1} }

hook global ModuleLoaded tmux %{
        define-command -docstring "New pane with shell to the right" vsplit %{
            	tmux-terminal-vertical sh -c "kak_client=%val{client} $SHELL"
        }	
        define-command -docstring "New pane with shell below" hsplit %{
            	tmux-terminal-horizontal sh -c "kak_client=%val{client} $SHELL"
        }
        define-command -docstring "New window with shell" tabn %{
            	tmux-terminal-window sh -c "kak_client=%val{client} $SHELL"
        }
            
        define-command -docstring "New pane with current buffer to the right" \
        	bvsplit -params .. -command-completion %{
            	tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
        }
        define-command -docstring "New pane with current buffer below" \
        	bhsplit -params .. -command-completion %{
            	tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
        }
        define-command -docstring "New window with current buffer" \
        	btabn  -params .. -command-completion %{
            	tmux-terminal-window kak -c %val{session} -e "%arg{@}"
        }
        map global user ',' ": tmux-send-text<ret>" -docstring "Send selection to REPL"
}

def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
}

      	
# Other custom key mapings

define-command -docstring 'Invoke fzf to open a file' -params 0 fzf-edit %{
    evaluate-commands %sh{
        if [ -z "${kak_client_env_TMUX}" ]; then
            printf 'fail "client was not started under tmux"\n'
        else
            file="$(fd -L -t f |TMUX="${kak_client_env_TMUX}" fzf-tmux -d 15)"
            if [ -n "$file" ]; then
                printf 'edit "%s"\n' "$file"
            fi
        fi
    }
}

# the original version no longer works since kak_buflist is no longer ":" separated.
# this one works even you have single quote or newline in file names.

define-command -docstring 'Invoke fzf to select a buffer' fzf-buffer %{
    evaluate-commands %sh{
        BUFFER=$(
            (
                eval "set -- $kak_buflist"
                while [ $# -gt 0 ]; do
                    printf "%s\0" "$1"
                    shift
                done
            ) |
            fzf-tmux -d 15 --read0
        )
        BUFFER=${BUFFER/\'/\'\'}
        if [ -n "$BUFFER" ]; then
            printf "buffer '%s'" "${BUFFER}"
        fi
    }
}

# Source connect: https://github.com/alexherbo2/connect.kak.git
# source "%val{config}/prelude.kak"
# source "%val{config}/connect/modules/fifo/fifo.kak"
# source "%val{config}/connect/modules/fzf/fzf.kak"
# source "%val{config}/connect.kak"
# require-module connect
# require-module connect-fzf

hook global ModuleLoaded tmux %{
      alias global popup tmux-terminal-vertical
}

# source "%val{config}/verilog.kak"

# plug "andreyorst/fzf.kak" config %{
#     map -docstring 'fzf mode' global user 'p' ': fzf-mode<ret>'
# } defer fzf %{
#     set-option global fzf_preview_width '65%'
#     set-option global fzf_project_use_tilda true
#     set-option global fzf_file_command "find . \( -path '*/venv*' -o -path '*/.git*' \) -prune -o -type f -print"
# }

# plug "andreyorst/smarttab.kak" defer smarttab %{
#     # when `backspace' is pressed, 4 spaces are deleted at once
#     set-option global softtabstop 4
# } config %{
#     # these languages will use `expandtab' behavior
#     hook global WinSetOption filetype=(python|kak|sh) expandtab
#     # these languages will use `noexpandtab' behavior
#     hook global WinSetOption filetype=(makefile|go) noexpandtab
#     # these languages will use `smarttab' behavior
#     hook global WinSetOption filetype=(c|cpp) smarttab
# }

# plug 'delapouite/kakoune-cd' %{
#     # Suggested mapping
#     map global user c ': enter-user-mode cd<ret>' -docstring 'cd'
#     # Suggested aliases
#     alias global cdb change-directory-current-buffer
#     alias global cdr change-directory-project-root
#     alias global ecd edit-current-buffer-directory
#     alias global pwd print-working-directory
# }
# 
# # EasyMotion
# plug 'danr/kakoune-easymotion'  %{
#     map global user e ': enter-user-mode easymotion<ret>' -docstring 'EasyMotion'
#     face global EasyMotionBackground rgb:999999
#     face global EasyMotionForeground yellow+b
#     face global EasyMotionSelected white+b
# }


# Favorite color scheme
colorscheme base16-mine

# Tab's for completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# <comma><dot> to escape
hook global InsertChar \. %{ try %{
    exec -draft hH <a-k>,\.<ret> d
    exec <esc>
}}

# black formating for Python
hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    lint-enable
    set-option window lintcmd 'flake8'
    set-option window formatcmd 'black -q  -'
}

# Formating and Listing for Go
hook global WinSetOption filetype=go %{
    set-option window formatcmd 'gofmt'
}

# grep with ripgrep
set global grepcmd 'rg --column'

# line numbers
add-highlighter global/ number-lines -relative

# TMUX panes & window creation
# define-command -docstring "vsplit [<commands>]: split tmux vertically" \
# vsplit -params .. -command-completion %{
#         tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
# }
# 
# define-command -docstring "split [<commands>]: split tmux horizontally" \
# split -params .. -command-completion %{
#         tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
# }
# 
# define-command -docstring "tabnew [<commands>]: create new tmux window" \
# tabnew -params .. -command-completion %{
#         tmux-terminal-window kak -c %val{session} -e "%arg{@}"
# }

# Ranger
# define-command ranger -params .. -file-completion %(connect ranger %arg(@))

# map global user 'v' ": vsplit<ret>" -docstring "Vertical split buffer"
# map global user 'h' ": split<ret>" -docstring "Horizontal split buffer"
# map global user 't' ": tabnew<ret>" -docstring "New tab with buffer"
# map global user 'r' ": ranger<ret>" -docstring "Vertical split with Ranger"



