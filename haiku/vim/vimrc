" Very basic Vim

" plug-ins {{{
call plug#begin()
" Theme / Looks
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'
" Tim Pope Goodness
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
" Other essential stuff
Plug 'lifepillar/vim-cheat40'
Plug 'lfv89/vim-interestingwords'
Plug 'mhinz/vim-signify'
" Navigation
Plug 'justinmk/vim-sneak' 
Plug 'wellle/targets.vim'
" Files & directories
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'bfrg/vim-fzy'
Plug 'lambdalisue/fern.vim'
" Coding
Plug 'vim-scripts/cscope.vim'
Plug 'konfekt/fastfold'
" Plug 'dense-analysis/ale'
Plug 'cohama/lexima.vim'
Plug 'preservim/tagbar'
" Completion Frameworks
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'piec/vim-lsp-clangd'
" Plug 'mattn/vim-lsp-settings'
call plug#end()
" }}}

" Basic settings not covered in vim-sensible {{{

set nobackup		" No backup files
set nowritebackup
set noswapfile

set showcmd		" show incomplete commands

set hidden      " switch buffers w/o saving
set hlsearch
set smartcase		" ignore case in search

set nowrap		" turn word wrap off

set tabstop=4		" set tab size in spaces
set expandtab		" tabs to spacts
set shiftwidth=4	" number of spaces inserted for a tab

set number relativenumber	" show line relative lineumbers

set visualbell      " No beeping

set autoread        " Autoload files that have changed outside of vim

set lazyredraw     " redraw only when needed (e.g. don't redraw when executing a macro)

" highlight matching [{()}] when cursor is placed on start/end character
set showmatch

let g:netrw_liststyle=3     " Set built-in file system explorer to match NERDTree

" }}}

" Coloring / Look & Feel {{{

set cursorline      " Highlight current line

" Highlight tailing whitespace
set list listchars=tab:▸\ ,eol:¬

" Highlight column 88
set colorcolumn=88

" Leader key is SPACE
let mapleader="\<Space>"

" exit insert mode
inoremap jk <ESC>
inoremap kj <ESC>

" PaperColor colorscheme
colorscheme PaperColor
set background=light

" Fold by marker Vimscript
autocmd FileType vim setlocal foldmethod=marker

" }}}

" Source code editing {{{
" no commment continuation in all files
autocmd FileType * setlocal formatoptions-=cro

set wildmenu
set wildmode=longest:full,full

" }}}


"" allow modifying the completeopt variable, or it will
"" be overridden all the time
"let g:asyncomplete_auto_completeopt = 0

"set completeopt=menuone,noinsert,noselect,preview

""autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
"let g:asyncomplete_min_chars=3
"let g:asyncomplete_popup_delay=300

" ALE {{{
let g:ale_linters_explicit = 1
let g:ale_linters = {
\    'c': ['clangd'],
\    'cpp': ['clangd'],
\}

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_set_ballons = 1
" }}}

" asyncomplete {{{

" Tab Completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" Use ALE's function for asyncomplete defaults
"au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
"  \ 'priority': 10,
"  \ }))

" Buffer source
"call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
"    \ 'name': 'buffer',
"    \ 'allowlist': ['*'],
"    \ 'blocklist': ['go'],
"    \ 'completor': function('asyncomplete#sources#buffer#completor'),
"    \ 'config': {
"        \    'max_buffer_size': 5000000,
"    \  },
"    \ }))
" }}}

" indentLine {{{
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" }}}

" Fern {{{

" Open drawer with current file selected, all windows same height & size
noremap <silent> <Leader>f :Fern . -drawer -reveal=% -toggle -width=35<CR><C-w>=

" Open split with current file selected, all windows same height & size
noremap <silent> <Leader>o :Fern . -reveal=%<CR><C-w>=

function! s:init_fern() abort
  " Use 'select' instead of 'edit' for default 'open' action
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
" }}}

" FastFold {{{
nmap zuz <Plug>(FastFoldUpdate)                 " Force update in normal mode
let g:fastfold_savehook = 1                     " Update on save
" Update on the following fold commands
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

" Fast fold for the following file types
let g:markdown_folding = 1
let g:rst_fold_enabled = 1
let g:vimsyn_folding = 'af'
let g:xml_syntax_folding = 1
let g:javaScript_fold = 1
let g:sh_fold_enabled= 7
let g:zsh_fold_enable = 1
let g:perl_fold = 1
let g:perl_fold_blocks = 1

" And C like filetyes
autocmd FileType c,cpp setlocal foldmethod=syntax
" }}}

" vim-lsp
if executable('pylsp')
    " pip install python-lsp-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd', '-background-index']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
