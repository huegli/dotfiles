" Very basic Vim

" Basic settings not covered in vim-sensible {{{

set nobackup		" No backup files
set nowritebackup
set noswapfile

set showcmd		" show incomplete commands

set hidden      " switch buffers w/o saving
set hlsearch
set smartcase		" ignore case in search

set nowrap		" turn word wrap off

set tabstop=4		" set tab size in spaces
set expandtab		" tabs to spacts
set shiftwidth=4	" number of spaces inserted for a tab

set number relativenumber	" show line relative lineumbers

set visualbell      " No beeping

set autoread        " Autoload files that have changed outside of vim

set lazyredraw     " redraw only when needed (e.g. don't redraw when executing a macro)

" highlight matching [{()}] when cursor is placed on start/end character
set showmatch

let g:netrw_liststyle=3     " Set built-in file system explorer to match NERDTree

" }}}

" Coloring / Look & Feel {{{
"

set cursorline      " Highlight current line

" Highlight tailing whitespace
set list listchars=tab:▸\ ,eol:¬

" Highlight column 88
" autocmd BufWinEnter * highlight ColorColumn ctermbg=darkgray
set colorcolumn=88

" exit insert mode
inoremap jk <ESC>
inoremap kj <ESC>

" PaperColor colorscheme
colorscheme PaperColor
set background=light


" }}}

if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd', '-background-index']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" allow modifying the completeopt variable, or it will
" be overridden all the time
let g:asyncomplete_auto_completeopt = 0

set completeopt=menuone,noinsert,noselect,preview

"autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
let g:asyncomplete_min_chars=3
let g:asyncomplete_popup_delay=1000
