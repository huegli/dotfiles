;; Comments are prefixed by double-semicolon. A single semicolon is parsed as the
;; keyboard key. Comments are ignored for the configuration file.
;;
;; This configuration language is Lisp-like. If you're unfamiliar with Lisp,
;; don't be alarmed. The maintainer jtroo is also unfamiliar with Lisp. You
;; don't need to know Lisp in-depth to be able to configure kanata.
;;
;; If you follow along with the examples, you should be fine. Kanata should
;; also hopefully have helpful error messages in case something goes wrong.
;; If you need help, you are welcome to ask.

;; This makes sure we don't use Kanata remapping for the ZSA Voyager
(defcfg
  macos-dev-names-exclude (
    "Voyager"
  )
  process-unmapped-keys true
)

;; Only one defsrc is allowed.
;;
;; defsrc defines the keys that will be intercepted by kanata. The order of the
;; keys matches with deflayer declarations and all deflayer declarations must
;; have the same number of keys as defsrc. Any keys not listed in defsrc will
;; be passed straight to the operating system.
(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  fn   lctl lalt lmet           spc            rmet ralt ◀    ▲ ▼  ▶
)

;; The first layer defined is the layer that will be active by default when
;; kanata starts up. This layer is the QWERTY layout with a bunch of
;; tap-hold-* keys to allow for home-row (-1) modifiers
(deflayer qwerty
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    1    2    3    4    5    6    7    8    9    0    -    =    bspc
  _    q    w    e    r    t    y    u    i    o    p    [    ]    \
  esc  a    s    d    f    g    h    j    k    l    ;    '    ret
  _    lsft @x   @c   @v   b    n    @m   @,   @.   @/   _
  _    _    _    @bspc          @spc           @ret _    _    _ _  _
)

(deflayer nomods
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    1    2    3    4    5    6    7    8    9    0    -    =    bspc
  _    q    w    e    r    t    y    u    i    o    p    [    ]    \
  esc  a    s    d    f    g    h    j    k    l    ;    '    ret
  _    z    x    c    v    b    n    m    ,    .    /    _
  _    _    _    bspc           spc            ret  _    _    _ _  _
)

;; This is the symbol & navication later
;; See https://github.com/jtroo/kanata/issues/975#issuecomment-2155593193 for media keys
(deflayer symnav
  _    brdn brup _    _     _    _    prev pp   next mute vold volu
  _    f1   f2   f3   f4    f5   f6   f7   f8   f9   f10  _    _    _
  _    _    home up   end   pgup S-z  -    =    z    \    _    _    _
  _    _    left down right pgdn S-1  S-9  S-0  S-q  S-8  _    _
  _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _               _              _    _    _    _ _  _
)

;; defalias is used to declare a shortcut for a more complicated action to keep
;; the deflayer declarations clean and aligned. The alignment in deflayers is not
;; necessary, but is strongly recommended for ease of understanding visually.
;;
;; Aliases are referred to by `@<alias_name>`.

(defvar
  tap-time 200
  hold-time 150

  long-tap 300
  long-hold 250

  left-hand-keys (
    q w e r t
    a s d f g
            b
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    n 
  )
)

(deffakekeys
  to-base (layer-switch qwerty)
)

(defalias
  ;; tap: backtick (grave), hold: toggle layer-switching layer while held
  ;; grl (tap-hold 150 200 grv (layer-toggle layers))

  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )
  ;; tap: space, hold: toggle to symnav layer while held
  spc (tap-hold-release $long-tap $long-hold spc (layer-while-held symnav))
  ret (tap-hold-release $tap-time $hold-time ret (multi lmet lalt lctl))
  bspc (tap-hold-release $tap-time $hold-time bspc (multi lmet lalt lctl))

;;  z (tap-hold-release-keys $tap-time $hold-time (multi z @tap) lsft $left-hand-keys)
  x (tap-hold-release-keys $tap-time $hold-time (multi x @tap) lalt $left-hand-keys)
  c (tap-hold-release-keys $tap-time $hold-time (multi c @tap) lmet $left-hand-keys)
  v (tap-hold-release-keys $tap-time $hold-time (multi v @tap) lctl $left-hand-keys)

  m (tap-hold-release-keys $tap-time $hold-time (multi m @tap) rctl $right-hand-keys)
  , (tap-hold-release-keys $tap-time $hold-time (multi , @tap) rmet $right-hand-keys)
  . (tap-hold-release-keys $long-tap $long-hold (multi . @tap) ralt $right-hand-keys)
  / (tap-hold-release-keys $long-tap $long-hold (multi / @tap) rsft $right-hand-keys)
)
